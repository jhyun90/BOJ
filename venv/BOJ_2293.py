import sys

n, k = list(map(int, sys.stdin.readline().split()))

coin = [int(sys.stdin.readline()) for _ in range(3)]

dp = [0 for i in range(10001)]
dp[0] = 1
# dp = [1 if total % value[0] == 0 else 0 for total in range(1, k + 1)]

print(coin, '\n')

# for i in value:
#     print("value", i)
#     for j in range(i, k + 1):
#         print("dp[{}] {} + dp[{}] {} =".format(j - i, dp[j - i], j, dp[j]), end=' ')
#         dp[j] += dp[j - i]
#         print("dp[{}] {}".format(j, dp[j]))
#
#     print()

for i in range(len(coin)):
    print("value", coin[:i + 1])
    for j in range(coin[i], k + 1):
        print("dp[{}] {} + dp[{}] {} =".format(j, dp[j], j - coin[i], dp[j - coin[i]]), end=' ')
        dp[j] += dp[j - coin[i]]
        print("dp[{}] {}".format(j, dp[j]))

    print()

print(dp[k])

# dp = [1 if total % value[0] == 0 else 0 for total in range(1, k + 1)]
# print(dp)
#
# for v in value:
#     print(v)
#     for total in range(1, k + 1):
#         # if v < total:
#         # 2   (2)     2(-> 1을 사용하여 합이 2가 되는 경우의 수: 1) + 2 * 0        0(-> 1을 사용하여 합이 0이 되는 경우의 수: 1) + 2 * 1
#         if v >= total:



'''
3 10
1
2
5
'''

'''
(1)                     (2)                     (3)
1   (1)     1 * 1       1   (0)     2 * 0       1   (0)     3 * 0
2   (1)     1 * 2       2   (1)     2 * 1       2   (0)     3 * 0 
3   (1)     1 * 3       3   (0)     2 * 0       3   (1)     3 * 1
4   (1)     1 * 4       4   (1)     2 * 2       4   (0)     3 * 0
5   (1)     1 * 5       5   (0)     2 * 0       5   (0)     3 * 0
6   (1)     1 * 6       6   (1)     2 * 3       6   (1)     3 * 2
7   (1)     1 * 7       7   (0)     2 * 0       7   (0)     3 * 0
8   (1)     1 * 8       8   (1)     2 * 4       8   (0)     3 * 0
9   (1)     1 * 9       9   (0)     2 * 0       9   (1)     3 * 3
10  (1)     1 * 10      10  (1)     2 * 5       10  (0)     3 * 0
11  (1)     1 * 11      11  (0)     2 * 0       11  (0)     3 * 0

(1, 2)
0   (1)     1 * 0 + 2 * 0
1   (1)     1 * 1 + 2 * 0
2   (2)     1 * 2 + 2 * 0   1 * 0 + 2 * 1
3   (2)     1 * 3 + 2 * 0   1 * 1 + 2 * 1
4   (3)     1 * 4 + 2 * 0   1 * 2 + 2 * 1   1 * 0 + 2 * 2
5   (3)     1 * 5 + 2 * 0   1 * 3 + 2 * 1   1 * 1 + 2 * 2
6   (4)     1 * 6 + 2 * 0   1 * 4 + 2 * 1   1 * 2 + 2 * 2   1 * 0 + 2 * 3
7   (4)     1 * 7 + 2 * 0   1 * 5 + 2 * 1   1 * 3 + 2 * 2   1 * 1 + 2 * 3
8   (5)     1 * 8 + 2 * 0   1 * 6 + 2 * 1   1 * 4 + 2 * 2   1 * 2 + 2 * 3   1 * 0 + 2 * 4
9   (5)     1 * 9 + 2 * 0   1 * 7 + 2 * 1   1 * 5 + 2 * 2   1 * 3 + 2 * 3   1 * 1 + 2 * 4
10  (6)     1 * 10 + 2 * 0  1 * 8 + 2 * 1   1 * 6 + 2 * 2   1 * 4 + 2 * 3   1 * 2 + 2 * 4   1 * 0 + 2 * 5
11  (6)     1 * 11 + 2 * 0  1 * 9 + 2 * 1   1 * 7 + 2 * 2   1 * 5 + 2 * 3   1 * 3 + 2 * 4   1 * 1 + 2 * 5

(1, 2, 5)
1   (1)     (1 * 1 + 2 * 0) + 5 * 0
2   (2)     (1 * 2 + 2 * 0) + 5 * 0   (1 * 0 + 2 * 1) + 5 * 0
3   (2)     (1 * 3 + 2 * 0) + 5 * 0   (1 * 1 + 2 * 1) + 5 * 0
4   (3)     (1 * 4 + 2 * 0) + 5 * 0   (1 * 2 + 2 * 1) + 5 * 0   (1 * 0 + 2 * 2) + 5 * 0
5   (4)     (1 * 5 + 2 * 0) + 5 * 0   (1 * 3 + 2 * 1) + 5 * 0   (1 * 1 + 2 * 2) + 5 * 0   (1 * 0 + 2 * 0) + 5 * 1
6   (5)     (1 * 6 + 2 * 0) + 5 * 0   (1 * 4 + 2 * 1) + 5 * 0   (1 * 2 + 2 * 2) + 5 * 0   (1 * 0 + 2 * 3) + 5 * 0   (1 * 1 + 2 * 0) + 5 * 1
7   (6)     (1 * 7 + 2 * 0) + 5 * 0   (1 * 5 + 2 * 1) + 5 * 0   (1 * 3 + 2 * 2) + 5 * 0   (1 * 1 + 2 * 3) + 5 * 0   (1 * 2 + 2 * 0) + 5 * 1   (1 * 0 + 2 * 1) + 5 * 1
8   (7)     (1 * 8 + 2 * 0) + 5 * 0   (1 * 6 + 2 * 1) + 5 * 0   (1 * 4 + 2 * 2) + 5 * 0   (1 * 2 + 2 * 3) + 5 * 0   (1 * 0 + 2 * 4) + 5 * 0   (1 * 3 + 2 * 0) + 5 * 1   (1 * 1 + 2 * 1) + 5 * 1
9   (8)     (1 * 9 + 2 * 0) + 5 * 0   (1 * 7 + 2 * 1) + 5 * 0   (1 * 5 + 2 * 2) + 5 * 0   (1 * 3 + 2 * 3) + 5 * 0   (1 * 1 * 2 * 4) + 5 * 0   (1 * 4 + 2 * 0) + 5 * 1   (1 * 2 + 2 * 1) + 5 * 1   (1 * 0 + 2 * 2) + 5 * 1

[구현 방법]
(1, 2) -> 2의 배수를 간격으로 증가 고려
1   (1)     1(-> 1을 사용하여 합이 1이 되는 경우의 수: 1) + 2 * 0
2   (2)     2(-> 1을 사용하여 합이 2가 되는 경우의 수: 1) + 2 * 0        0(-> 1을 사용하여 합이 0이 되는 경우의 수: 1) + 2 * 1
3   (2)     3(-> 1을 사용하여 합이 3이 되는 경우의 수: 1) + 2 * 0        1(-> 1을 사용하여 합이 1이 되는 경우의 수: 1) + 2 * 1
4   (3)     4(-> 1을 사용하여 합이 4가 되는 경우의 수: 1) + 2 * 0        2(-> 1을 사용하여 합이 2가 되는 경우의 수: 1) + 2 * 1      0(-> 1을 사용하여 합이 0이 되는 경우의 수: 1) + 2 * 2
...
(1, 2, 5) -> 5의 배수를 간격으로 증가 고려
1   (1)     1(-> 1과 2를 사용하여 합이 1이 되는 경우의 수: 1) + 5 * 0
2   (2)     2(-> 1과 2를 사용하여 합이 2가 되는 경우의 수: 2) + 5 * 0
...
5   (4)     5(-> 1과 2를 사용하여 합이 5가 되는 경우의 수: 3) + 5 * 0     0(-> 1과 2를 사용하여 합이 0이 되는 경우의 수: 1) + 5 * 1
6   (5)     6(-> 1과 2를 사용하여 합이 6이 되는 경우의 수: 4) + 5 * 0     1(-> 1과 2를 사용하여 합이 1이 되는 경우의 수: 1) + 5 * 1
7   (6)     7(-> 1과 2를 사용하여 합이 7이 되는 경우의 수: 4) + 5 * 0     2(-> 1과 2를 사용하여 합이 2가 되는 경우의 수: 2) + 5 * 1
...
10  (10)    10(-> 1과 2를 사용하여 합이 10이 되는 경우의 수: 6) + 5 * 0   5(-> 1과 2를 사용하여 합이 5가 되는 경우의 수: 3) + 5 * 1   0(1과 2를 사용하여 합이 0이 되는 경우의 수: 1) + 5 * 2
11  (11)    11(-> 1과 2를 사용하여 합이 11이 되는 경우의 수: 6) + 5 * 0   6(-> 1과 2를 사용하여 합이 6이 되는 경우의 수: 4) + 5 * 1   1(1과 2를 사용하여 합이 1이 되는 경우의 수: 1) + 5 * 2
12  (13)    12(-> 1과 2를 사용하여 합이 12가 되는 경우의 수: 7) + 5 * 0   7(-> 1과 2를 사용하여 합이 7이 되는 경우의 수: 4) + 5 * 1   2(1과 2를 사용하여 합이 2가 되는 경우의 수: 2) + 5 * 2
'''
